#version 430 core

layout (local_size_x = 16, local_size_y = 16) in;

layout(rgba32f, binding = 0) uniform image2D screenColors;

#define PI 3.1415926
#define RAD(x) ((x) * PI / 180.0)

struct AABB {
    vec2 interval[3];
};

struct Material {
    vec3 albedo;
    float roughness;

    vec3 emissionColor;
    float emissionStrength;
};

struct Sphere {
    float radius;
    vec3 center;
    int materialIndex;
    int aabbIndex;
};

struct Quad {
    vec3 q, u, v;
    int materialIndex;
    int aabbIndex;
};

layout(std430, binding = 10) readonly buffer AABBBoxes {
    AABB aabbBoxes[];
};

layout(std430, binding = 1) readonly buffer Materials {
    Material mats[];
};

layout(std430, binding = 2) readonly buffer Objects {
    Sphere spheres[];
};

layout(std430, binding = 3) readonly buffer Quads {
    Quad quads[];
};

uniform float frameIndex;

struct camera {
    float fov;
    vec3 position;
    vec3 forward, right, up;
    int bounces, rayPerPixel;
};

uniform camera cam;

struct HitInfo {
    vec3 point, normal;
    float t;
    int matId;
};

uint pcg(uint v) {
    uint state = v * uint(747796405) + uint(2891336453);
    uint word = ((state >> ((state >> uint(28)) + uint(4))) ^ state) * uint(277803737);
    return (word >> uint(22)) ^ word;
}

float rand(inout double seed) {
    seed = double(pcg(uint(seed)));
    return float(seed) / float(uint(0xffffffff));
}

float randND(inout double seed) {
    float theta = 2 * PI * rand(seed);
    float rho = sqrt(-2 * log(rand(seed)));
    return rho * cos(theta);
}

vec2 rand2(inout double seed) {
    return vec2(randND(seed), randND(seed)); 
}

vec3 rand3(inout double seed) {
    return vec3(randND(seed), randND(seed), randND(seed)); 
}

struct ray {
    vec3 origin, direction;
};

ray Ray(vec3 origin, vec3 direction) {
    ray result;
    result.origin = origin;
    result.direction = normalize(direction);
    return result;
}

vec3 rayAt(ray r, float t) {
    return r.origin + t * r.direction;
}

vec3 reflect(vec3 v, vec3 n) {
    return v - dot(v, n) * n * 2.0;
}

vec3 randOnHemisphere(vec3 normal, inout double seed) {
    vec3 rv = rand3(seed);

    vec3 right = normalize(cross(rv, normal));
    vec3 forward = cross(right, normal);

    rv.x = randND(seed);
    rv.z = randND(seed);
    rv.y = (randND(seed) + 1) * 0.5;

    return normalize(rv.x * right + rv.y * normal + rv.z * forward);
}

bool hitAABB(in AABB aabb, in ray r, in float m) {
    vec2 RI = vec2(0, m);

    for (int axis = 0; axis < 3; ++axis) {
        float adinv = 1.0 / r.direction[axis];
        float t0 = (aabb.interval[axis][0] - r.origin[axis]) * adinv;
        float t1 = (aabb.interval[axis][1] - r.origin[axis]) * adinv;
        if (min(t0, t1) > max(t0, t1)) {
            return false;
        }
    }
    return true;
}

bool hitSphere(in Sphere cir, in ray r, in float max, inout HitInfo info) {
    vec3 dir = cir.center - r.origin;
    float a = dot(r.direction, r.direction);
    float b = -2.0 * dot(r.direction, dir);
    float c = dot(dir, dir) - cir.radius * cir.radius;
    float discriminant = b * b - 4 * a * c;
    if (discriminant < 0) {
        return false;
    }

    float sqrtd = sqrt(discriminant);
    info.t = (-b - sqrtd) / (2.0 * a);

    if (!(info.t > 0 && info.t < max)) {
        info.t = (-b + sqrtd) / (2.0 * a);
        if (!(info.t > 0 && info.t < max)) {
            return false;
        }
    }

    info.point = rayAt(r, info.t);
    info.normal = (info.point - cir.center) / cir.radius;
    if (dot(r.direction, info.normal) > 0) {
        info.normal = -info.normal;
    }
    return true;
}

bool hitQuad(in Quad quad, ray r, float max, inout HitInfo info) {
    vec3 normal = (cross(quad.u, quad.v));

    float denom = dot(normal, r.direction);

    if (abs(denom) < 1e-8)
        return false;

    float D = dot(normal, quad.q);
    float t = (D - dot(normal, r.origin)) / denom;
    if (t <= 0 || t >= max)
        return false;

    vec3 w = normal / dot(normal, normal);
    vec3 intersection = rayAt(r, t);
    vec3 planar_hitpt_vector = intersection - quad.q;
    float alpha = dot(w, cross(planar_hitpt_vector, quad.v));
    float beta = dot(w, cross(quad.u, planar_hitpt_vector));

    if (alpha < 0 || alpha > 1 || beta < 0 || beta > 1) {
        return false;
    }

    info.t = t;
    info.point = intersection;
    info.normal = normalize(normal);
    if (dot(r.direction, info.normal) > 0) {
        info.normal = -info.normal;
        return false;
    }

    return true;
}

void hit(ray r, out HitInfo track) {
    HitInfo tmp;

    float closest = 0xffffff;

    for (int i = 0; i < spheres.length(); ++i) {
        tmp.matId = spheres[i].materialIndex;

        int aabbIndex = spheres[i].aabbIndex;

        if (aabbIndex < 0) {
            if (hitSphere(spheres[i], r, closest, tmp)) {
                closest = tmp.t;
                track = tmp;
            }
            continue;
        }

        if (hitAABB(aabbBoxes[aabbIndex], r, closest) && hitSphere(spheres[i], r, closest, tmp)) {
            closest = tmp.t;
            track = tmp;
        }
    }

    for (int i = 0; i < quads.length(); ++i) {
        tmp.matId = quads[i].materialIndex;

        int aabbIndex = quads[i].aabbIndex;

        if (aabbIndex < 0) {
            if (hitQuad(quads[i], r, closest, tmp)) {
                closest = tmp.t;
                track = tmp;
            }
            continue;
        }

        if (hitAABB(aabbBoxes[aabbIndex], r, closest) && hitQuad(quads[i], r, closest, tmp)) {
            closest = tmp.t;
            track = tmp;
        }
    }

    track.t = closest;
}

vec3 traceColor(ray r, inout double seed) {
    vec3 incomingLight = vec3(0);
    vec3 rayColor = vec3(1);

    for (int i = 0; i < cam.bounces; ++i) {
        seed += i;

        HitInfo info;
        hit(r, info);

        if (info.t == 0xffffff) {
            float t = (r.direction.y + 1) * 0.5;
            vec3 skyColor = (1.0 - t) * vec3(1) + t * vec3(0.5, 0.7, 1);
            skyColor = vec3(0);
            incomingLight += skyColor * rayColor;
            break;
        }

        vec3 N = info.normal;
        vec3 V = r.direction;

        int matIndex = info.matId;

        vec3 diffuseDir = normalize(N + normalize(rand3(seed)));
        vec3 specularDir = reflect(V, N);

        vec3 nextDir = mix(specularDir, diffuseDir, mats[matIndex].roughness);
        r = Ray(info.point + nextDir * 0.0001, nextDir);

        incomingLight += mats[matIndex].emissionColor * mats[matIndex].emissionStrength * rayColor;
        // rayColor *= mix(mats[matIndex].albedo, vec3(1), 1 - mats[matIndex].roughness);
        rayColor *= mats[matIndex].albedo;
    }

    return incomingLight;
}

void main() {
    ivec2 fragCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 imgSize = imageSize(screenColors);
    if (fragCoord.x >= imgSize.x || fragCoord.y >= imgSize.y) {
        return;
    }

    // Setup
    vec3 lookat = cam.forward + cam.position;
    vec3 cameraCenter = cam.position;

    float viewportRatio = imgSize.x / float(imgSize.y);
    float focalLength = length(lookat - cameraCenter);
    float fov = cam.fov;

    float viewportHeight = 2.0 * tan(RAD(fov) / 2.0) * focalLength;
    float viewportWidth = viewportHeight * viewportRatio;
    vec2 viewport = vec2(viewportWidth, viewportHeight);

    vec3 uv = vec3(fragCoord / vec2(imgSize) * 2.0 - 1.0, 0);
    uv = viewportWidth * 0.5 * uv.x * cam.right
       + viewportHeight * 0.5 * uv.y * cam.up
       + focalLength * cam.forward
       + cameraCenter;

    vec2 perPixel = viewport / vec2(imgSize.x, imgSize.y);

    // Random ray at pixel center
    double seed = double(frameIndex * (fragCoord.x + fragCoord.y * imgSize.x));
    vec3 color = vec3(0.0);
    for (int i = 0; i < cam.rayPerPixel; ++i) {
        seed += i;
        ray r = Ray(cameraCenter, uv + ((perPixel.x + randND(seed) / imgSize.x) * cam.right +
                                    (perPixel.y + randND(seed) / imgSize.y) * cam.up) * 0.5
                                    - cameraCenter);
        color += traceColor(r, seed);
    }
    color /= float(cam.rayPerPixel);

    vec4 finalColor = (imageLoad(screenColors, fragCoord) * (float(frameIndex) - 1.0) + vec4(color, 1)) / float(frameIndex);
    imageStore(screenColors, fragCoord, finalColor);
}
